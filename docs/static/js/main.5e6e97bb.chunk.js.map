{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","hooks/useFetchGifts.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","addCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","type","value","onChange","target","defaultProps","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifts","loading","state","setState","useEffect","getGift","then","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","setCategories","s","i","key","ReactDOM","render","document","getElementById"],"mappings":"mMAGe,SAASA,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,cAAgB,EACdC,mBAAS,IADK,mBAC3CC,EAD2C,KAC/BC,EAD+B,KAclD,OACG,uBAAMC,SART,SAAsBC,GACnBA,EAAEC,iBACCJ,EAAWK,SACXP,EAAcE,GACdC,EAAc,MAIjB,UACG,8CACA,uBACGK,KAAK,OACLC,MAAOP,EACPQ,SAjBT,SAA2BL,GACxBF,EAAcE,EAAEM,OAAOF,aA2B7BV,EAAYa,aAAe,G,+EClCpB,WAAuBC,GAAvB,uBAAAC,EAAA,6DACEC,EADF,0DAC2DC,UAAUH,GADrE,sDAEmBI,MAAMF,GAFzB,cAEEG,EAFF,gBAGqBA,EAASC,OAH9B,uBAGIC,EAHJ,EAGIA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIC,MAAOF,EAAIE,MAAOV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAJ1F,kBAMGM,GANH,6C,sBCIA,IAAMO,EAAgB,SAACf,GAAc,IAAD,EAEdZ,mBAAS,CAChCmB,KAAM,GACNS,SAAS,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAgBxC,OATAC,qBAAU,YDXN,SAAP,mCCYMC,CAAQpB,GAAWqB,MAAK,SAACR,GACtBK,GAAS,iBAAO,CACbX,KAAMM,EACNG,SAAS,WAGf,CAAEhB,IAEEiB,GClBK,SAASK,EAAT,GAAuC,EAAjBX,GAAkB,IAAdC,EAAa,EAAbA,MAAOV,EAAM,EAANA,IAC7C,OACG,sBAAKqB,UAAU,wCAAf,UACG,qBAAKC,IAAKtB,EAAKuB,IAAKb,IACpB,4BAAIA,OCFE,SAASc,EAAT,GAAgC,IAAb1B,EAAY,EAAZA,SAAY,EAETe,EAAcf,GAAlCa,EAF6B,EAEnCN,KAAcS,EAFqB,EAErBA,QAEtB,OACG,qCACG,6BAAKhB,IACJgB,GAAW,aACZ,qBAAKO,UAAU,aAAf,SAEMV,EAAOJ,KAAI,SAACC,GAAD,OACR,cAACY,EAAD,eAEOZ,GADCA,EAAIC,YCZf,SAASgB,IAAgB,IAAD,EACAvC,mBAAS,CAAC,aADV,mBAC7BwC,EAD6B,KACjBC,EADiB,KAOpC,OACG,gCACG,8CACA,cAAC3C,EAAD,CAAaC,cAPnB,SAAuBS,GACpBiC,GAAc,SAACC,GAAD,OAAQlC,GAAR,mBAAkBkC,UAO7B,uBACA,6BAEMF,EAAWnB,KAAI,SAACsB,EAAGC,GAAJ,OACZ,cAACN,EAAD,CAEG1B,SAAU+B,GADLA,W,MCf1BE,IAASC,OACP,cAACP,EAAD,IACAQ,SAASC,eAAe,W","file":"static/js/main.5e6e97bb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'; \n\nexport default function AddCategory({addCategories}) {\n   const [inputValue, setInputValue] = useState(\"\");\n\n   function handleInputChange(e) {\n      setInputValue(e.target.value)\n   }\n    \n   function handleSubmit(e) {\n      e.preventDefault();\n      if(inputValue.trim()){\n         addCategories(inputValue);\n         setInputValue(\"\");\n      }\n   }\n   return (\n      <form onSubmit={handleSubmit}>\n         <h2>Add Category</h2>  \n         <input\n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n         />\n      </form>\n   )\n}\n\n\nAddCategory.propTypes = {\n   addCategories: PropTypes.func.isRequired,\n}\n\nAddCategory.defaultProps = {\n}","export async function getGift(category) {\n   const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=CSGqcaUdFMrrzkGbiXhDkE5CcHdMjiET`;\n   const response = await fetch(url);\n   const { data }  = await  response.json();\n   const gifs = data.map(img => ({id: img.id, title: img.title, url: img.images.downsized_medium.url}))\n\n   return gifs;\n} ","import { useEffect, useState } from \"react\";\nimport { getGift } from \"../helpers/getGifts\";\n\n\nexport const useFetchGifts = (category) => {\n\n   const [state, setState] = useState({\n      data: [],\n      loading: true,\n   });\n\n   useEffect(() => {\n      getGift(category) .then((images) => {\n         setState(() => ({\n            data: images,\n            loading: false,\n         }));\n      });\n   }, [ category ]);\n\n   return state;\n\n}\n","import React from 'react'\n\nexport default function GifGridItem({id, title, url}) {\n   return (\n      <div className=\"card animate__animated animate__pulse\">\n         <img src={url} alt={title} />\n         <p>{title}</p>\n      </div>\n   )\n}\n","import React from 'react'\nimport { useFetchGifts } from '../hooks/useFetchGifts'\nimport GifGridItem from './GifGridItem';\n\nexport default function GifGrid({ category }) {\n\n   const { data: images, loading } = useFetchGifts(category);\n\n   return (\n      <>\n         <h3>{category}</h3>\n         {loading && \"Loading...\"}\n         <div className=\"card-grid \">\n            {\n               images.map((img) => (\n                  <GifGridItem\n                     key={img.id}\n                     {...img}\n                  />\n               ))\n            }\n         </div>\n      </>\n   )\n}\n","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nexport default function GifExpertApp() {\n   const [categories, setCategories] = useState([\"One Pice\"]);\n   \n   function addCategories(value) {\n      setCategories((s) => [value, ...s]);\n   }\n   \n   return (\n      <div>\n         <h2>GifExpertApp</h2>\n         <AddCategory addCategories={addCategories}  />\n         <hr/> \n         <ol>\n            {\n               categories.map((i, key) => (\n                  <GifGrid \n                     key={i}  \n                     category={i}\n                  />\n               ))\n            }\n         </ol>\n      </div>\n   )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}